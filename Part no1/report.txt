***Ον/μο: Νικητάκης Παναγιώτης
***ΑΕΜ: 1717
***Ημερομηνία: 17/10/2016
***HPC Lab1 Report

Εφάρμοσα τις αλλαγές με την εξής σειρά: 

**Function Inlining (s4): 
Έκανα inline την concolution2D() το οποίο βοήθησε. Δοκίμασα να κάνω inline και τη sobel() αλλά οι χρόνοι χειροτέρεψαν.
O0: speedup = 1.41%
fast: speedup = 5.61%

**Loop Interchange (s41):
Το εφάρμοσα στο loop της (πρώην) convolution2D() καθώς και σε αυτό που περνάει όλο τον πίνακα της εικόνας(line 75).
Βοήθησε σε τεράστιο βαθμό λόγω τοπικότητας.
O0: speedup = 27.5%
fast: speedup = 92.4%

**Loop Invariant code motion (s415):
Lines 76, 83, 117. Βοήθησε σε ένα μικρό βαθμό.
O0: speedup = 1.97%
fast: speedup = 1.59% 

**Common Subexpression Elimination (s4156):
Lines 23, 38, 90, 106, 124. 
Βοήθησε λίγο στη μεταγλώττιση με -fast.
Με Ο0 είχε οριακά αρνητικό αποτέλεσμα.
O0: speedup = 1.97%
fast: slow = 0.827% 

**Loop Fusion (s41563):
Line 84. Βοήθησε στην ένωση των 2 loop που έχουν τη ίδια δουλειά concolution2D, το ένα οριζόντια και το άλλο κάθετα στην εικόνα.
Στην μεταγλώττιση με -fast εμφανίστηκε καθυστέρηση.
O0: speedup = 9.61%
fast: slow = 3.59% 

**Loop unrolling (s415632):
Line 85. Έκανα unrolling το εσωτερικό loop. 
Στην Ο0 είχε μεγάλη επίδραση ενώ στην fast σχεδόν καμία.
O0: speedup = 8.9%
fast: slow = 0.228% 

**Loop unrolling no2 (s415632b):
Line 85. Έκανα unrolling και το εξωτερικό loop. 
Τώρα στη μεταγλώττιση με fast υπήρξε μεγάλη βελτίωση.
O0: speedup = 8.64%
fast: speedup = 21.7% 

**Strength Reduction (s415632b7):
Line 9, 39, 40, 44-45, 149, 151, 169. 
Αντικατέστησα τον πολλαπλασιασμό(*SIZE) με left shift.
Επίσης το pow() με πολλαπλασιασμό και κάποιους  πολλαπλασιασμούς με προσθέσεις.
Τεράστια επίδραση είχε με το Ο0.
O0: speedup = 63.8%
fast: speedup = 8.64% 

**Helping Compiler (s415632b78):
Line 21, 34. Το μόνο που άλλαξα ήταν να δηλώσω σαν registers κάποιες μεταβλητές.
Επέφερε σχεδόν μηδενική βελτίωση.
O0: speedup = 0.017%
fast: speedup = 0.23% 

-----------
Η συνολική βελτίωση ήταν: 

Ο0: μείωση χρόνου: 80.75% 
    χ5.2 φορές γρηγορότερα.
Με το Strength Reduction να είναι η πιο σημαντική βελτίωση (63.8%).

fast: μείωση χρόνου 94.64%
      χ18.7 φορές γρηγορότερα.
Με το Loop Interchange να είναι η πιο σημαντική βελτίωση (92.4%).
-----------

Επεξεργαστής, μνήμη: system.txt
Λειτουργικό: Ubuntu 14.04.5 LTS
Πυρήνας: 3.13.0-98-generic
Μεταγλωττιστής: icc 17.0.0

Σημειώσεις:
1)Πριν από κάθε μέτρηση άδειαζα τις caches (sudo sh -c 'echo 3 >/proc/sys/vm/drop_caches')
2)Στις συνολικές γραφικές παραστάσεις η τυπική απόκλιση είναι σχεδόν αμηλητέα και δεν διακρίνεται εύκολα. (plot_O0.jpg και plot_fast.jpg)
3)Στο compare_O0.jpg και compare_fast.jpg παρουσιάζονται οι διαφορές ανά δύο της κάθε βελτιστοποίησης μαζί με την τυπική απόκλιση.
4)Χρησιμοποίησα τυπική απόκλιση με σφάλμα δείγματος. (sample or population standard deviation).
5)Στο αρχείο helping_table.txt αντιστοιχίζω τα ονόματα αρχείων με τις βελτιστοποιήσεις για να είναι πιο εύκολο να διαβαστούν τα διαγράμματα. Ο κάθε αριθμός αντιστοιχεί σε αυτόν από την εκφώνηση στο pdf.




